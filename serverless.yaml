service: ${file(./package.json):name}
frameworkVersion: "3"
plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-prune-plugin
  - serverless-s3-sync
  - serverless-add-api-key
package:
  individually: true
provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs16.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    metrics: true
  tracing:
    apiGateway: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
    NODE_ENV: ${sls:stage}
    COGNITO_USER_POOL_ID: { Ref: CognitoUserPool }
    COGNITO_CLIENT_ID: { Ref: CognitoUserClient }
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    STATIC_ASSETS_URL: https://s3.${self:provider.region}.amazonaws.com/${self:custom.staticAssetsBucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminDeleteUser
            - cognito-idp:CreateGroup
            - cognito-idp:GetGroup
            - cognito-idp:GetUser
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            - dynamodb:GetRecords
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UserTable, Arn]
            # - !Sub "${UserTable.Arn}"
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource:
            - !Sub "${UserTable.Arn}/index/*"
            # - !Sub "${UserTable.Arn}"
            # - !Sub "${UserTable.Arn}/index/EmailIndex"
custom:
  usersTableName: ${sls:stage}.${self:service}.users
  staticAssetsBucketName: ${sls:stage}.${self:service}.static-assets
  cognitoClientName: ${sls:stage}.${self:service}.client
  cognitoUserPoolName: ${sls:stage}.${self:service}.users
  serverless-offline:
    allowCache: true # Preserve memory
    useChildProcesses: true
    httpPort: 3000
  prune:
    automatic: true
    number: 3
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: node16
    platform: node
    concurrency: 10
  s3Sync:
    - bucketName: ${self:custom.staticAssetsBucketName}
      localDir: /assets
  apiKeys:
    - name: apikey
      value: ${ssm:/aws/reference/secretsmanager/dev/user-api/api-key} # This path MUST be valid or deployment will fail
      deleteAtRemoval: false # Retain secret when stack is removed
functions:
  getUser:
    handler: src/handlers/user/me.handler
    events:
      - http:
          path: public/user/me
          method: get
          cors: true
          authorizer:
            name: IdTokenAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn
            claims:
              - email
  getUserById:
    handler: src/handlers/user/by-id.handler
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          private: true
  getUserByName:
    handler: src/handlers/user/by-name.handler
    events:
      - http:
          path: user/name/{name}
          method: get
          cors: true
          private: true
  getUserByEmail:
    handler: src/handlers/user/by-email.handler
    events:
      - http:
          path: user/email/{email}
          method: get
          cors: true
          private: true
  getUserByHandle:
    handler: src/handlers/user/by-handle.handler
    events:
      - http:
          path: user/handle/{handle}
          method: get
          cors: true
          private: true
  register:
    handler: src/handlers/user/register.handler
    events:
      - http:
          path: user
          method: post
          cors: true
          private: true
  confirmAccount:
    handler: src/handlers/user/activate.handler
    events:
      - http:
          path: user/activate/{activationCode}
          method: get
          cors: true
          private: true
  updateUserStatus:
    handler: src/handlers/user/update-status.handler
    events:
      - http:
          path: user/{id}/status/{status}
          method: patch
          cors: true
          private: true
  putUserData:
    handler: src/handlers/user/user-data.handler
    events:
      - http:
          path: user/{id}/data/update
          method: put
          cors: true
          private: true
  patchUserData:
    handler: src/handlers/user/user-data.handler
    events:
      - http:
          path: user/{id}/data/update
          method: patch
          cors: true
          private: true
  login:
    handler: src/handlers/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true
          private: true
  verifyToken:
    handler: src/handlers/auth/verify-token.handler
    events:
      - http:
          path: auth/token/{tokenType}/verify/{token}
          method: get
          cors: true
          private: true
  issueBadge:
    handler: src/handlers/user/badges.handler
    events:
      - http:
          path: user/{id}/badge/{name}
          method: post
          cors: true
          private: true
  revokeBadge:
    handler: src/handlers/user/badges.handler
    events:
      - http:
          path: user/{id}/badge/{name}
          method: delete
          cors: true
          private: true
  deleteUser:
    handler: src/handlers/user/delete.handler
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
          private: true
resources:
  Resources:
    StaticAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.staticAssetsBucketName}
        AccessControl: PublicRead
    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticAssetsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Sub "${StaticAssetsBucket.Arn}/*"
              Principal: "*"
    CognitoUserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.cognitoClientName}
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        AccessTokenValidity: 6 # exp in hrs
        IdTokenValidity: 6 # exp in hrs
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.cognitoUserPoolName}
        EmailVerificationSubject: "Your verification Code"
        EmailVerificationMessage: "Use this code to confirm your sign up {####}"
        MfaConfiguration: OFF
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: name
            Required: true
            Mutable: false
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False
    CognitoUserPoolGroupUser:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Users"
        GroupName: "USER"
        UserPoolId: { Ref: CognitoUserPool }
    CognitoUserPoolGroupModerator:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Moderators"
        GroupName: "MODERATOR"
        UserPoolId: { Ref: CognitoUserPool }
    CognitoUserPoolGroupAdmin:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Admins"
        GroupName: "ADMIN"
        UserPoolId: { Ref: CognitoUserPool }
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: handle
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: activationCode
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NameIndex
            KeySchema:
              - AttributeName: name
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: HandleIndex
            KeySchema:
              - AttributeName: handle
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ActivationCodeIndex
            KeySchema:
              - AttributeName: activationCode
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST
    # MyApi:
    #   Type: AWS::Serverless::Api
    #   Properties:
    #     StageName: dev
    #     Cors: "'*'"
    #     Auth:
    #       DefaultAuthorizer: MyCognitoAuthorizer
    #       Authorizers:
    #         MyCognitoAuthorizer:
    #           UserPoolArn: !GetAtt CognitoUserPool.Arn
